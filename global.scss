//Class Names
$base-class-name: 'base';
$theme-class-name: 'theme';

$offset-shadow-width: 0px;
$offset-shadow-color: #FFF;
$offset-shadow: 0 0 0 $offset-shadow-width $offset-shadow-color;
$base-shadow: 0 0 #0000;
$font-exclusion: 300, 400, 600, 700;

$base-colors: (
	100: #f3f4f6,
	200: #d1d5db,
	300: #6b7280,
	400: #374151,
	500: #111827
);

$theme-colors: (
	100: #fef9c3,
	200: #fde047,
	300: #eab308,
	400: #a16207,
	500: #713f12
);

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

$positions:( 
    'top': 'top', 
    'end': 'right',
    'bottom': 'bottom',
    'start': 'left'
);
/*******************
* COLORS
******************/
@mixin generateColorClasses($colors, $class-name) {
    // Border Color + :hover + :focus
    @each $key, $color in $colors {
        .border-#{$class-name}-#{$key} {
          border-color: #{$color};
        }
        .hover\:border-#{$class-name}-#{$key}:hover {
            border-color: #{$color};
        }
        .focus\:border-#{$class-name}-#{$key}:focus {
            border-color: #{$color};
        }
    }

    //Text Color + :hover + :focus
    @each $key, $color in $colors {
        .text-#{$class-name}-#{$key} {
            color: #{$color};
        }
        .hover\:text-#{$class-name}-#{$key}:hover {
            color: #{$color};
        }
        .focus\:text-#{$class-name}-#{$key}:focus {
            color: #{$color};
        }
    }
  
    // Background Color + :hover + :focus
    @each $key, $color in $colors {
        .bg-#{$class-name}-#{$key} {
            --bg-opacity: 1;
            background-color: rgba($color, var(--bg-opacity));
        }
        .hover\:bg-#{$class-name}-#{$key}:hover {
            background-color: #{$color};		
        }
        .focus\:bg-#{$class-name}-#{$key}:focus {
            background-color: #{$color};		
        }
    }

    // Link Color + :hover
    @each $key, $color in $colors {
        .link-#{$class-name}-#{$key} {
            color: #{$color};
            -webkit-text-decoration-color: #{$color};
            text-decoration-color: #{$color};
        }
        .link-#{$class-name}-#{$key}:hover, .link-#{$class-name}-#{$key}:focus {
            $light: lighten($color, 10%);
            color:#{$light}
        } 
    }
    // Shadow color as --shadow-color
    @each $key, $color in $colors {
        .focus\:shadow-#{$class-name}-#{$key}:focus {
            --shadow-color: #{$color};
        }
        .hover\:shadow-#{$class-name}-#{$key}:hover {
            --shadow-color: #{$color};
        }
        //Box Shadow Spread Radius
        @for $i from 1 through 5 {
            $ring-shadow: 0 0 0 #{$i}px var(--shadow-color); 
            .focus\:shadow-#{$i}:focus {
                box-shadow: $offset-shadow, $ring-shadow, $base-shadow;
            }
            .hover\:shadow-#{$i}:hover {
            	box-shadow: $offset-shadow, $ring-shadow, $base-shadow;
            }
        } 
    }

 
}

@include generateColorClasses($theme-colors, $theme-class-name);
@include generateColorClasses($base-colors, $base-class-name);

/*******************
* SIZING
******************/
/*Width*/
@for $i from 1 through 4 {
    .w-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        width: $size;
    }
} 

/*Max Width*/
@for $i from 1 through 4 {
    .mw-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        max-width: $size;
    }
} 

/*Height*/
@for $i from 1 through 4 {
    .h-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        max-height: $size;
    }
} 

/*Max Height*/
@for $i from 1 through 4 {
    .mh-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        max-height: $size;
    }
} 

/*Font Size*/
@for $i from 1 through 4 {
	.text-sm-#{$i} {
		$size: 1em - calc($i / 8);
		font-size: $size;
	}
}
/*******************
* OPACITY
******************/
@for $i from 1 through 4 {
    .opacity-#{calc($i * 20)} {
        $opacity: 0% + calc($i * 20);
        opacity: $opacity;
    }
} 
/*******************
* POSITION
******************/
@mixin extendedPosition($property, $value) {
    @for $i from 1 through 4 {
        .#{$property}-#{$i * 20} {
            #{$value}: calc(#{$i * 20}%);
        }
    }
}

@each $key, $position in $positions {
    @include extendedPosition($key, $position);
}

/*******************
* HOVER AND FOCUSED STATES
******************/

.hover\:text-white:hover {
	color: #fff;
}
.hover\:bg-white:hover {
	background-color: #fff;
}
.hover\:text-black:hover {
	color: #000;
}
.hover\:bg-black:hover {
	background-color: #000;
}
.focus\:text-white:focus {
	color: #fff;
}
.focus\:bg-white:focus {
	background-color: #fff;
}
.focus\:text-black:focus {
	color: #000;
}
.focus\:bg-black:focus {
	background-color: #000;
}

/*******************
* OUTLINE
******************/
.outline-0 {
    outline: 2px solid transparent;
    outline-offset: 2px;
}


/*******************
* THEME BUTTON
******************/
@mixin set-button-colors($bg-color) {
  background-color: $bg-color;

  // Set the text color based on the lightness of the background color
  @if (lightness($bg-color) > 50) {
    color: #000; // Light background, return dark text color
  } @else {
    color: #fff; // Dark background, return light text color
  }

  // Apply the hover effect
  &:hover {
    $hover-color: lighten($bg-color, 10%);
    background-color: $hover-color;

    // Set the text color on hover based on the lightness of the hover background color
    @if (lightness($hover-color) > 50) {
      color: #000; // Light background, return dark text color
    } @else {
      color: #fff; // Dark background, return light text color
    }
  }
}

// Iterate over the map to generate the color rules for each key
@each $key, $color in $theme-colors {
  // Generate the CSS rules for this key
  .btn-theme-#{$key} {
    @include set-button-colors($color);
    border: 0;
  }
}
@each $key, $color in $base-colors {
  // Generate the CSS rules for this key
  .btn-base-#{$key} {
    @include set-button-colors($color);
    border: 0;
  }
}

/*******************
* FONT WEIGHT
******************/
@for $i from 1 through 9 {
  $value: $i * 100;
  @if not index($font-exclusion, $value) {
    .fw-#{$i}00 {
      font-weight: $value;
    }
  }
}