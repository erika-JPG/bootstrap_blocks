@import url('https://fonts.googleapis.com/css2?family=Arsenal:ital,wght@0,400;0,700;1,400;1,700&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');

//Class Names
$base-class-name: 'base';
$theme-class-name: 'theme';

$offset-shadow-width: 0px;
$offset-shadow-color: #FFF;
$offset-shadow: 0 0 0 $offset-shadow-width $offset-shadow-color;
$base-shadow: 0 0 #0000;
$font-exclusion: 300, 400, 600, 700;

$base-colors: (
	100: #f3f4f6,
	200: #d1d5db,
	300: #6b7280,
	400: #374151,
	500: #111827
);

// BROWN
// $theme-colors: (
// 	100: #fef9c3,
// 	200: #fde047,
// 	300: #eab308,
// 	400: #a16207,
// 	500: #713f12
// );

//RED
// $theme-colors: (
// 	100: #f0c3c3,
// 	200: #f04747,
// 	300: #c10808,
// 	400: #750707,
// 	500: #441212
// );

//GREEN
// $theme-colors: (
// 	100: #d4f0c3,
// 	200: #8cf047,
// 	300: #39b808,
// 	400: #267507,
// 	500: #1a4412
// );

//BLUE
// $theme-colors: (
// 	100: #c3dbf0,
// 	200: #47a8f0,
// 	300: #0869c1,
// 	400: #074a75,
// 	500: #132e44
// );

//PURPLE
// $theme-colors: (
//     100: #e5c3f0,
//     200: #c647f0,
//     300: #8108c1,
//     400: #4a0750,
//     500: #2b1333
// );


//YELLOW
// $theme-colors: (
//     100: #f0f0c3,
//     200: #f0e647,
//     300: #c1b808,
//     400: #746a07,
//     500: #434312
// );


//PINK
// $theme-colors: (
//     100: #f0c3db,
//     200: #f047a6,
//     300: #c10869,
//     400: #75074a,
//     500: #44132e
// );


//TEAL
// $theme-colors: (
//     100: #c3f0e1,
//     200: #47f0c7,
//     300: #08c1a6,
//     400: #075074,
//     500: #133144
// );


//ORANGE
$theme-colors: (
    100: #f0dbc3,
    200: #f0a047,
    300: #c17508,
    400: #754a07,
    500: #443013
);


//SUBSCRIBE
// $theme-colors: (
// 	100: #eff0f8,
// 	200: #b8a5f9,
// 	300: #8366f1,
// 	400: #5d47a8,
// 	500: #3f2d71
// );



$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

$positions:( 
    'top': 'top', 
    'end': 'right',
    'bottom': 'bottom',
    'start': 'left'
);

$border-radius: (
  'sm': .5rem,
  'md': .75rem,
  'lg': 1rem,
  'xl': 2rem
);

:root {
    --background-image: url('https://mdbcdn.b-cdn.net/img/new/slides/041.webp');
    --font-family: 'Open Sans', sans-serif;
}

body{
    font-family: var(--font-family);
}
h1, h2, h3, h4, h5, h6 {
    font-family: 'Arsenal', sans-serif;
}
.glass {background: rgba(255, 255, 255, 0.65);border-radius: 3px;box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);backdrop-filter: blur(7.7px);-webkit-backdrop-filter: blur(7.7px);border: 1px solid rgba(255, 255, 255, 0.19);}

/*******************
* COLORS
******************/
@mixin generateColorClasses($colors, $class-name) {
    // Border Color + :hover + :focus
    @each $key, $color in $colors {
        .border-#{$class-name}-#{$key} {
          border-color: #{$color}!important;
        }
        .hover\:border-#{$class-name}-#{$key}:hover {
            border-color: #{$color};
        }
        .focus\:border-#{$class-name}-#{$key}:focus {
            border-color: #{$color};
        }
    }

    //Text Color + :hover + :focus
    @each $key, $color in $colors {
        .text-#{$class-name}-#{$key} {
            color: #{$color};
        }
        .hover\:text-#{$class-name}-#{$key}:hover {
            color: #{$color};
        }
        .focus\:text-#{$class-name}-#{$key}:focus {
            color: #{$color};
        }
    }
  
    // Background Color + :hover + :focus
    @each $key, $color in $colors {
        .bg-#{$class-name}-#{$key} {
            --bg-opacity: 1;
            background-color: rgba($color, var(--bg-opacity));
        }
        .hover\:bg-#{$class-name}-#{$key}:hover {
            background-color: #{$color};		
        }
        .focus\:bg-#{$class-name}-#{$key}:focus {
            background-color: #{$color};		
        }
    }

    // Link Color + :hover
    @each $key, $color in $colors {
        .link-#{$class-name}-#{$key} {
            color: #{$color};
            -webkit-text-decoration-color: #{$color};
            text-decoration-color: #{$color};
        }
        .link-#{$class-name}-#{$key}:hover, .link-#{$class-name}-#{$key}:focus {
            $light: lighten($color, 10%);
            color:#{$light}
        } 
    }
    // Shadow color as --shadow-color
    @each $key, $color in $colors {
        .focus\:shadow-#{$class-name}-#{$key}:focus {
            --shadow-color: #{$color};
        }
        .hover\:shadow-#{$class-name}-#{$key}:hover {
            --shadow-color: #{$color};
        }
        //Box Shadow Spread Radius
        @for $i from 1 through 5 {
            $ring-shadow: 0 0 0 #{$i}px var(--shadow-color); 
            .focus\:shadow-#{$i}:focus {
                box-shadow: $offset-shadow, $ring-shadow, $base-shadow;
            }
            .hover\:shadow-#{$i}:hover {
            	box-shadow: $offset-shadow, $ring-shadow, $base-shadow;
            }
        } 
    }

 
}

@include generateColorClasses($theme-colors, $theme-class-name);
@include generateColorClasses($base-colors, $base-class-name);

/*******************
* SIZING
******************/
/*Width*/
@for $i from 1 through 4 {
    .w-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        width: $size;
    }
} 
@for $i from 1 through 10 {
    .w#{calc($i * 10)}-vh {
        $size: 0vh + calc($i * 10);
        width: $size;
    }
}
@for $i from 1 through 10 {
    .w-#{calc($i * 10)}-vw {
        $size: 0vw + calc($i * 10);
        width: $size;
    }
}

/*Max Width*/
@for $i from 1 through 4 {
    .mw-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        max-width: $size;
    }
} 
@for $i from 1 through 10 {
    .mw#{calc($i * 10)}-vh {
        $size: 0vh + calc($i * 10);
        max-width: $size;
    }
}
@for $i from 1 through 10 {
    .mw-#{calc($i * 10)}-vw {
        $size: 0vw + calc($i * 10);
        max-width: $size;
    }
}

/*Height*/
@for $i from 1 through 4 {
    .h-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        height: $size;
    }

} 
@for $i from 1 through 10 {
    .h-#{calc($i * 10)}-vh {
        $size: 0vh + calc($i * 10);
        height: $size;
    }
}
@for $i from 1 through 10 {
    .h-#{calc($i * 10)}-vw {
        $size: 0vw + calc($i * 10);
        height: $size;
    }
}

/*Max Height*/
@for $i from 1 through 4 {
    .mh-#{calc($i * 20)} {
        $size: 0% + calc($i * 20);
        max-height: $size;
    }
} 
@for $i from 1 through 10 {
    .mh-#{calc($i * 10)}-vh {
        $size: 0vh + calc($i * 10);
        max-height: $size;
    }
}
@for $i from 1 through 10 {
    .mh-#{calc($i * 10)}-vw {
        $size: 0vw + calc($i * 10);
        max-height: $size;
    }
}

/*Font Size*/
@for $i from 1 through 4 {
	.text-sm-#{$i} {
		$size: 1em - calc($i / 8);
		font-size: $size;
	}
}
/*******************
* OPACITY
******************/
@for $i from 1 through 4 {
    .opacity-#{calc($i * 20)} {
        $opacity: 0% + calc($i * 20);
        opacity: $opacity;
    }
} 
/*******************
* POSITION
******************/
@mixin extendedPosition($property, $value) {
    @for $i from 1 through 4 {
        .#{$property}-#{$i * 20} {
            #{$value}: calc(#{$i * 20}%);
        }
    }
}

@each $key, $position in $positions {
    @include extendedPosition($key, $position);
}

/*******************
* HOVER AND FOCUSED STATES
******************/

.hover\:text-white:hover {
	color: #fff;
}
.hover\:bg-white:hover {
	background-color: #fff;
}
.hover\:text-black:hover {
	color: #000;
}
.hover\:bg-black:hover {
	background-color: #000;
}
.focus\:text-white:focus {
	color: #fff;
}
.focus\:bg-white:focus {
	background-color: #fff;
}
.focus\:text-black:focus {
	color: #000;
}
.focus\:bg-black:focus {
	background-color: #000;
}

/*******************
* OUTLINE
******************/
.outline-0 {
    outline: 2px solid transparent;
    outline-offset: 2px;
}


/*******************
* THEME BUTTONS
******************/
@mixin set-button-colors($bg-color) {
  background-color: $bg-color;

  // Set the text color based on the lightness of the background color
  @if (lightness($bg-color) > 50) {
    color: #000; // Light background, return dark text color
  } @else {
    color: #fff; // Dark background, return light text color
  }

  // Apply the hover effect
  &:hover {
    $hover-color: lighten($bg-color, 10%);
    background-color: $hover-color;

    // Set the text color on hover based on the lightness of the hover background color
    @if (lightness($hover-color) > 50) {
      color: #000; // Light background, return dark text color
    } @else {
      color: #fff; // Dark background, return light text color
    }
  }
}
@mixin set-button-outline($bg-color) {
    border: 1px solid $bg-color;
    color: $bg-color;
    
    // Apply the hover effect
    &:hover {
      $hover-color: darken($bg-color, 1%);
      background-color: $hover-color;
      box-shadow: unset!important;
  
      // Set the text color on hover based on the lightness of the hover background color
      @if (lightness($hover-color) > 50) {
        color: #000; // Light background, return dark text color
      } @else {
        color: #fff; // Dark background, return light text color
      }
    }
  }


@each $key, $color in $theme-colors {
  .btn-theme-#{$key} {
    @include set-button-colors($color);
    border: 0;
  }
  .btn-outline-theme-#{$key} {
    @include set-button-outline($color);
  }
}

@each $key, $color in $base-colors {
  .btn-base-#{$key} {
    @include set-button-colors($color);
    border: 0;
  }
    .btn-outline-base-#{$key} {
      @include set-button-outline($color);
    }
  }

  
/*******************
* FONT WEIGHT
******************/
@for $i from 1 through 9 {
  $value: $i * 100;
  @if not index($font-exclusion, $value) {
    .fw-#{$i}00 {
      font-weight: $value;
    }
  }
}
/*******************
* BORDER RADIUS
******************/
@each $key, $radius in $border-radius {
    .rounded-#{$key} {
      border-radius: $radius;
    }
  }


/*******************
* BACKGROUND IMAGE
******************/
.theme-background-image {
    background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), var(--background-image);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;

}

